rem package components.ui.bound.form

use ::components/db/DataRow.bbj::DataRow
use ::components/db/DataRow.bbj::DataField

use ::components/bl/BusinessComponent.bbj::BusinessComponent
use ::components/bl/ValidationError.bbj::ValidationError

use ::components/ui/unbound/UIWidget.bbj::UIWidget
use ::components/ui/bound/UIComponent.bbj::UIComponent
use ::components/ui/bound/toolbar/NavigationToolbarComponent.bbj::NavigationToolbarComponent
use ::components/ui/bound/toolbar/FormEditToolbarComponent.bbj::FormEditToolbarComponent
use ::components/ui/bound/controls/ForeignKeyPicker.bbj::ForeignKeyPicker

use ::translations/bbtranslator.bbj::BBTranslator


rem /**
rem * SimpleFormComponent
rem *
rem * @author Stephan Wald
rem * @version 1.0
rem */
class public SimpleFormComponent extends UIComponent implements UIWidget

    field private BBjNumber IsFormLocked
    field protected BBjChildWindow FormWnd!
    field protected BBjChildWindow ToolbarWnd!

    field protected java.util.HashMap ControlList!

    field protected NavigationToolbarComponent NavigationToolbar!
    field protected FormEditToolbarComponent FormEditToolbar!

    field protected DataRow   Rec!

    field protected DataRow   EditedRec!
    field protected java.util.HashMap EditedFields!
    field protected java.util.HashMap ForeignKeyPickerList! = new java.util.HashMap()

    field protected BBjVector WarningIcons! = new BBjVector()

    field private java.util.HashMap RestoreControllerFilter!

    field private BBjNumber ReadOnly


    rem /**
    rem * Constructor SimpleFormComponent
    rem * Creates the component by using a given existing BBjChildWindow
    rem * @param BBjWindow wnd!: child window that the component shall occupy
    rem */
    method public SimpleFormComponent(BBjChildWindow cw!)

        #super!(cw!)
        #initialize()

    methodend


    rem /**
    rem * Constructor SimpleFormComponent
    rem * Creates the component by using a given existing BBjWindow
    rem * @param BBjWindow wnd!: child window that the component shall occupy
    rem * @param BBjNumber id: Control ID for the BBjChildWindow, which is created on wnd!
    rem * @param BBjNumber x: x-coordinate
    rem * @param BBjNumber y: y-coordinate
    rem * @param BBjNumber w: width
    rem * @param BBjNumber h: height
    rem */
    method public SimpleFormComponent(BBjWindow wnd!, BBjNumber id, BBjNumber x, BBjNumber y, BBjNumber w, BBjNumber h)

        #super!(wnd!,id,x,y,w,h)
        #initialize()

    methodend


    rem /**
    rem * Method setChildWindow
    rem * load the child window from a resource file (.arc)
    rem * @param BBjString resFile$: the name of the resource file
    rem * @param BBjNumber childId: the child window ControlID in the resource file
    rem */
    method public void setChildWindow(BBjString resFile$, BBjNumber childId)

        res = BBjAPI().getSysGui().resOpen(resFile$)
        #FormWnd! = #getWnd().createChildWindow(res,childId,500,0,0)
        rem #getLaf().prepareWindow(#FormWnd!)
        rem #getLaf().setStyle(#FormWnd!,"ShadowedPanel")
        #FormWnd!.setVisible(0)
        #FormWnd!.setTrack(0)
        #FormWnd!.setSize(#getW(), #getH())

        if #this!.getShowToolBar() then
            #ToolbarWnd!.setSize(#getWnd().getWidth(), 25)
            #FormWnd!.setLocation(0,26)
            #setSize(#getW(), #getH()) 
        fi

    methodend


    rem /**
    rem * Method getAllControlsRecursive:
    rem * Get all controls recursively
    rem * @param BBjWindow pWindow!: the window with the controls
    rem * @return BBjVector: vector of all control information
    rem */
    method public static BBjVector getAllControlsRecursive(BBjWindow pWindow!)

        declare BBjVector  allControls!
        declare BBjVector  winControls!
        declare BBjControl control!
        declare BBjVector  cwdControls!
        declare java.util.HashMap    controlMap!

        allControls!=new BBjVector()

        control!=cast(BBjControl,pWindow!)
        controlMap!=new java.util.HashMap()

        controlMap!.put("ControlInstance",pWindow!)

        controlMap!.put("ControlID",control!.getID())
        controlMap!.put("ControlName",control!.getName())
        allControls!.addItem(controlMap!)

        winControls!=pWindow!.getAllControls()
        controlCount=winControls!.size()

        if controlCount>0 then
            for i=0 to controlCount-1
                control!=cast(BBjControl,winControls!.get(i))
                if control!.getControlType()=control!.CHILD_TYPE then
                    cwdControls!=#getAllControlsRecursive(cast(BBjWindow,control!))
                    if cwdControls!<>null() then
                        cwdControlCount=cwdControls!.size()
                        if cwdControlCount>0 then
                            for j=0 to cwdControlCount-1
                                allControls!.addItem(cwdControls!.get(j))
                            next j
                        endif
                    endif
                else
                    controlMap!=new java.util.HashMap()
                    controlMap!.put("ControlInstance",winControls!.get(i))
                    controlMap!.put("ControlID",control!.getID())
                    controlMap!.put("ControlName",control!.getName())
                    allControls!.addItem(controlMap!)
                endif
            next i
        endif

        methodret allControls!

    methodend


    rem /**
    rem * Method prepareControlList:
    rem * prepare the controls (determine foreign keys, create calendar button's for InputD fields, set callbacks for controls)
    rem * @param BBjVector fieldNames!: vector with controls to prepare
    rem */
    method protected void prepareControlList(BBjVector fieldNames!)

        if fieldNames!.size() then
            for i=0 to fieldNames!.size()-1
                fields$ = fields$+fieldNames!.getItem(i)+$0a$
            next i
        fi

        li! = #getAllControlsRecursive(#FormWnd!)

        #ControlList! = new java.util.HashMap()


        if li!.size() then
            for i=0 to li!.size()-1
                controlMap! = li!.getItem(i)

                ctrl_name$= controlMap!.get("ControlName")
                ctrl! = ControlMap!.get("ControlInstance")

                #getLaf().setStyle(ctrl!,"")

                wnd! = BBjAPI().getSysGui().getWindow(ctrl!.getContextID())

                if pos(".label"=ctrl_name$)>0 then
                    lbl$ = #getBC().getColumnAttributes().getFieldAttribute(ctrl_name$(1,len(ctrl_name$)-6),"LABEL",err=*endif)
                    ctrl!.setText(lbl$+":")
                else
                    if #getBC().getPrimaryKeySegments().indexOf(ctrl_name$)>-1 and ctrl!.getControlType() <> 17 then
                        ctrl!.setCallback(BBjAPI.ON_INPUT_KEYPRESS,#this!,"onCtrlInputKeypress")
                    fi
                fi

                if ctrl!.getControlType() = BBjControl.INPUTD_TYPE then
                    h=ctrl!.getHeight()
                    TbPick! = wnd!.addToolButton(wnd!.getAvailableControlID(),ctrl!.getX()+ctrl!.getWidth(),ctrl!.getY(),h,h,"")
                    TbPick!.setCallback(BBjAPI.ON_TOOL_BUTTON_PUSH,#this!,"onTbDatePick")
                    TbPick!.setName(ctrl_name$+".pick")
                    img!=BBjAPI().getSysGui().getImageManager().loadImageFromBytes($89504E470D0A1A0A0000000D49484452000000100000001008060000001FF3FF61000001D44944415478DA9592CF8BA96114C7FD23B397C558D8584959DD9D85A494A69464C1BD4AA424126F162232C34674576C6E6ED9988D158532C68F894C29228A895828BEE339DD5BF3C4D4CC53DFDEE73DCF399F739E731E91E8DFBACF26F15D893E2EE1E1277A6F7FBE2CE6CF01EE7E29715F34E1E12F2FB7DB8DE7D747CEC6FC983F0730FB6EF1BBF1E3CB62FE1780EF8A03D86C3694CB6508C51B12DB339BCBE5422E97E3CE2A950A1C0E070F608EF57A1D8D46E353B55A2D74BB5D0C0603040281EB8042A100854201B1584C41D96C166AB51A72B91C068301A5520993C904E170F83A402693412291402A9512C0683442A552A156AB41A3D1C0EFF763B55A211A8D5E0744221168B55A28954AB4DB6DBABF4EA783C5622155AB55ECF77B241289CF7B60B55A29DB7038442814A2FF7EBF0F8FC743573C1E8F482693978066B349597D3E1F659B4EA76463E5068341A4D3698CC7639C4EA74B007B719D4E87B232A7F97C8EF57A8DDD6E87C3E14041FF173BBB0078BD5E8C46230A7E3CCFFCE93CB2423E8F5EAF879773F9CBE592FA93C964108FC761369B79009BEB6C36A30E2F160BACCFDFCD6683ED764B628F27954AD1F8583293C9C403D801CB108BC5A8C3ACC48F12040176BB1D7ABD9EFAE3743A09F00ED76A5070D91CEE300000000049454E44AE426082$)
                    TbPick!.setImage(img!)
                    TbPick!.setOpaque(0)
                fi

                if ctrl!.getControlType() = BBjControl.CHECKBOX_CONTROL then
                   lbl$ = #getBC().getColumnAttributes().getFieldAttribute(ctrl_name$,"LABEL",err=*endif)
                   ctrl!.setText(lbl$)
                fi
                
                if pos(ctrl_name$=fields$) > 0 then
                    #ControlList!.put(ctrl_name$,ControlMap!)

                    rem now register the necessary events
                    ctrl!.setCallback(BBjAPI.ON_GAINED_FOCUS,#this!,"onCtrlGainedFocus",err=*next)
                    ctrl!.setCallback(BBjAPI.ON_LOST_FOCUS,#this!,"onCtrlLostFocus",err=*next)
                    ctrl!.setCallback(BBjAPI.ON_EDIT_MODIFY,#this!,"onCtrlEditModify",err=*next)


                    rem now link the foreign key pickers
                    bc! = #getBC().getForeignKeyBC(ctrl_name$)

                    if bc!<>null() then
                        fk$=#getBC().getForeignKeyFkField(ctrl_name$)
                        picker! = new ForeignKeyPicker(wnd!,wnd!.getAvailableControlID(),ctrl!,bc!,fk$)
                        uiform! = #getForeignKeyFormLink(ctrl_name$)

                        if uiform! <> null() then
                            picker!.setForeignKeyFormLink(uiform!)
                        fi

                        #ForeignKeyPickerList!.put(ctrl_name$,picker!)
                    fi
                fi
            next i
        fi

        #FormWnd!.setVisible(1)

    methodend


    method public void onCtrlGainedFocus(BBjGainedFocusEvent ev!)

        if #getBC().getSelection().size() then
            recno=#getBC().getSelection().getItem(0)
            #getBC().setEditedRecord(recno)
        fi

        if #EditedRec! = null() and #Rec! <> null() then
            #EditedRec! = cast(DataRow,#Rec!.clone())
        fi

        if #EditedFields! = null() then
            #EditedFields! = new java.util.HashMap()
        fi

        #EditedFields!.put(ev!.getControl().getName(),null())
        print ev!.getControl().getName(),"-> null()"
        rem put null() to mark that the field has gained the focus. lostFocus will then asynchronously collect the data

    methodend


    method public void onCtrlInputKeypress(BBjInputKeypressEvent ev!)

        if ev!.getControl().getText()>"" and (ev!.getKeyCode() = 13 or ev!.getKeyCode() = 9) then
            #searchRecord()
        fi

    methodend


    method public void onCtrlLostFocus(BBjLostFocusEvent ev!)

        ctrl_name$=ev!.getControl().getName()

        if #EditedFields! <> null() and #ControlList!.get(ctrl_name$)<>null() then
            v$=ev!.getText()

            if #getBC().getPrimaryKeySegments().indexOf(ctrl_name$)>-1 and v$="" then
                methodret
                rem don't validate primary key fields as long as they're empty
            fi

            if #EditedRec! = null() or v$<>cvs(#EditedRec!.getFieldAsString(ctrl_name$),2) then
                #EditedFields!.put(ctrl_name$,v$)

                validate = #getBC().validateField(ctrl_name$, v$, #EditedRec!, #EditedFields!)
                #this!.markValidationErrors()
            else
                #EditedFields!.remove(ctrl_name$)
                print ctrl_name$,"-> deleted"
            fi
        fi

    methodend


    method public void onCtrlEditModify(BBjEditModifyEvent ev!)

        text$=ev!.getText()
        #getBC().broadcastEdit(ev!.getControl().getName(),text$,err=*next)

    methodend


    rem /**
    rem * Method initialize:
    rem * initialize the form. Creates hte edit and navigation toolbar.
    rem */
    method protected void initialize()

            rem initialize the toolbar

            #ToolbarWnd! = #getWnd().addChildWindow(100,0,0,#getWnd().getWidth(),0,"",$00000800$,BBjAPI().getSysGui().getAvailableContext())
            #getLaf().prepareWindow(#ToolbarWnd!)
            #getLaf().setStyle(#ToolbarWnd!, "ToolBarLike")

            #FormEditToolbar! = new FormEditToolbarComponent(#ToolbarWnd!,10,0,2,200,25)
            if #this!.getBC()<>null() then 
                #FormEditToolbar!.setBC(#this!.getBC())
            fi

            #NavigationToolbar! = new NavigationToolbarComponent(#ToolbarWnd!,11,200,2,250,25)
            if #this!.getBC()<>null() then
                #NavigationToolbar!.setBC(#this!.getBC())
            fi

    methodend


    rem /**
    rem * Method setShowToolBar:
    rem * set the visiblity of the tool bar
    rem * @param BBjNumber fShow: 1 = visible, 0 = invisible
    rem */
    method public void setShowToolBar(BBjNumber fShow)

        #super!.setShowToolBar(fShow)
        if fShow and #FormWnd! <> null() then
            #ToolbarWnd!.setSize(#getWnd().getWidth(), 25)
            #FormWnd!.setLocation(0,26)
            #setSize(#getW(), #getH())
        else
            rem TODO implement hide toolbar
        fi

    methodend


    rem /**
    rem * Method setShowStatusBar:
    rem * set the visiblity of the status bar
    rem * @param BBjNumber fShow: 1 = visible, 0 = invisible
    rem */
    method public void setShowStatusBar(BBjNumber fShow)

        #super!.setShowStatusBar(fShow)
        #super!.setStatusBar(#getParentWnd().addStatusBar(5))
        #super!.getStatusBar().setTextAt(0,"...")

    methodend


    rem /**
    rem * Method setShowMenuBar:
    rem * set the visiblity of the menu bar
    rem * @param BBjNumber fShow: 1 = visible, 0 = invisible
    rem */
    method public void setShowMenuBar(BBjNumber fShow)

        #super!.setShowMenuBar(fShow)

        if fShow then
            editMenu! = #super!.getMenuBar().addMenu(-2,"&Edit")
            #FormEditToolbar!.setupMenu(editMenu!)

            navMenu! = #super!.getMenuBar().addMenu(-3,"&Record")
            #NavigationToolbar!.setupMenu(navMenu!)
        fi

    methodend


    rem /**
    rem * Method setSize:
    rem * set the size of the form component
    rem * @param BBjNumber width: the width
    rem * @param BBjNumber height: the height
    rem */
    method public void setSize(BBjNumber w, BBjNumber h)

        #super!.setSize(w,h)

        if #ToolbarWnd! <> null() then
            #ToolbarWnd!.setSize(w,25)
            #FormWnd!.setSize(w, h-25)
        else
            #FormWnd!.setSize(w, h)
        fi

    methodend


    rem /**
    rem * Method setVisible:
    rem * set the visibility of the form component
    rem * @param BBjNumber visible: 1 = visible, 0 = invisible
    rem */
    method public void setVisible(BBjNumber v)

        #super!.setVisible(v)

    methodend


    rem /**
    rem * Method setReadOnly:
    rem * set the form component as read only
    rem * @param BBjNumber ro: 1 = read only, 0 = editable
    rem */
    method public void setReadOnly(BBjNumber ro)

        #ReadOnly = ro
        #enableControls(0,0)

    methodend


    rem /**
    rem * Method setBC:
    rem * set the business component for the form
    rem * @param BusinessComponent bc!: the business component
    rem */
    method public void setBC(BusinessComponent bc!)

        #super!.setBC(bc!)

        if #NavigationToolbar! <> null() then
            #NavigationToolbar!.setBC(#this!.getBC())
        fi

        if #FormEditToolbar! <> null() then
            #FormEditToolbar!.setBC(#this!.getBC())
        fi

        Rec!  = #getBC().getColumnAttributes()
        #prepareControlList(Rec!.getFieldNames())

        #newRecord()

    methodend


    rem /**
    rem * Method refresh:
    rem * refresh the displayed data
    rem * @param BusinessComponent bc!: the business component
    rem */
    method public void refresh(BBjNumber resetFilter)

        #displayData()
        #EditedRec! = null()
        #enableControls(0,0)

    methodend


    rem /**
    rem * Method refresh:
    rem * This method is called from the business component when the selection changed
    rem */
    method public void onSelectionChange()

        #displayData()
        #EditedRec! = null()
        #enableControls(1,0)

    methodend


    rem /**
    rem * Method canSelectionChange:
    rem * This method is called from the business component when the selection changed
    rem * (needs overriding)
    rem * @param BBjNumber force: if set to 1, enforce saving unsaved data as selection will undeniably change
    rem * @return BBjNumber: 0 = can't change, 1 = change is OK
    rem */
    method public BBjNumber canSelectionChange(BBjNumber force)

        if  #EditedRec! = null() or #EditedFields! = null() then
            methodret 1
        fi

        if force=0 then
            opt=35
        else
            opt=36
        fi

        a=msgbox(#super!.getTranslator().getTranslation("SAVE_CHANGES"),opt,#getBC().getTitle())

        switch a
            case 6
            rem yes
            #getBC().broadcastSaveRecord()
            canDrive=1
            #EditedRec! = null()
            break

            case 7
            rem no
            canDrive=1
            #EditedRec! = null()
            break

            case 2
            rem cancel
            canDrive=0
            break
        swend

        methodret canDrive

    methodend


    rem /**
    rem * Method displayData:
    rem * display the data on the user component
    rem */
    method public void displayData()

        #clearValidationErrorSignage()
        #EditedFields! = null()
        #EditedRec! = null()

        if #getBC().getSelection() = null() or #getBC().getSelection().size() <> 1 or #getBC().size()=0 then
            #Rec!=null()
            if #IsFormLocked = 0 then
                #getBC().clearValidationErrors()
                #getBC().clearFieldValidationErrors()

                #IsFormLocked = 1
                #emptyForm()
                #enableControls(0,0)
                rem #FormWnd!.setEnabled(0)
            fi
        else
            if #IsFormLocked = 1 then
                #IsFormLocked = 0
                #enableControls(1,0)
                rem #FormWnd!.setEnabled(1)
            fi


            rem display record

            recno = #getBC().getSelection().getItem(0)
            #getBC().prepareResultSet(recno,recno)
            #Rec!  = cast(DataRow,#getBC().getResultSet().getItem(recno))

            if #ControlList!.size() then
                ks! = #ControlList!.keySet()
                it! = ks!.iterator()

                while it!.hasNext()
                    ctrl_name$=it!.next()
                    ControlMap! = #ControlList!.get(ctrl_name$)
                    ctrl!       = ControlMap!.get("ControlInstance")

                    if #getBC().getPrimaryKeySegments().indexOf(ctrl_name$)>-1 then
                        ctrl!.setEnabled(0)
                    fi

                    bc!=#getBC().getForeignKeyBC(ctrl_name$)

                    if bc! = null() then
                        #displayField(ctrl_name$,err=*next)
                    else
                        rem do nothing
                        rem if there's a foreignKeyBC let that one change the field
                    fi

                    if #getBC().getControllerFilter().get(ctrl_name$) <> null() then
                        ctrl!.setEnabled(0)

                        if bc! <> null() and #ForeignKeyPickerList!.get(ctrl_name$) <> null() then
                            pick! = #ForeignKeyPickerList!.get(ctrl_name$)
                            pick!.setEnabled(0)
                        fi
                    fi
                wend
            fi

            locked = #getBC().isLocked(recno)
            #FormWnd!.setEnabled(!locked)
        fi

        rem #getBC().getSelection().size()
        rem #getBC().getResultSet().size()

    methodend


    rem /**
    rem * Method displayField:
    rem * shows the data of a field on a form control
    rem * @param BBjString name$: the name of the control
    rem */
    method protected void displayField(BBjString ctrl_name$)

        contents$ = #Rec!.getFieldAsString(ctrl_name$)

        ControlMap! = #ControlList!.get(ctrl_name$)
        ctrl!       = ControlMap!.get("ControlInstance")
        ctrl_obj!   = ControlMap!.get("ControlObject")

        switch ctrl!.getControlType()
            case BBjControl.INPUTD_TYPE
                if #Rec!.getFieldType(ctrl_name$)="D" then
                    ctrl!.setValue(#Rec!.getFieldAsNumber(ctrl_name$))
                else
                    goto default_set
                fi
            break

            case BBjControl.CHECKBOX_TYPE
                ctrl!.setSelected(#Rec!.getFieldAsNumber(ctrl_name$))
            break

            case BBjControl.LISTBUTTON_TYPE
            case BBjControl.LISTBOX_TYPE
                rem TODO optimize - save list serverside and save roundtrips!
                declare auto BBjVector list!
                list! = ctrl!.getAllItems()

                if list!.size() then
                    for i=0 to list!.size()-1
                        if list!.getItem(i)=contents$ then
                            ctrl!.selectIndex(i)
                            break
                        fi
                    next i
                fi
            break

            case default
            default_set:
            ctrl!.setText(cvs(contents$,2))
            break
        swend

    methodend


    rem /**
    rem * Method emptyForm:
    rem * empty all controls in the form
    rem */
    method private void emptyForm()

        if #ControlList! = null() or #ControlList!.size() = 0 then
            methodret
        fi

        ks! = #ControlList!.keySet()
        it! = ks!.iterator()

        while it!.hasNext()
            ctrl_name$=it!.next()

            if #getBC().getForeignKeyBC(ctrl_name$)=null() then
                ControlMap! = #ControlList!.get(ctrl_name$)
                ctrl! = ControlMap!.get("ControlInstance")

                switch ctrl!.getControlType()
                    case BBjControl.LISTBUTTON_TYPE
                    case BBjControl.LISTBOX_TYPE

                    break

                    case BBjControl.CHECKBOX_TYPE
                    ctrl!.setSelected(0)
                    break

                    case default
                    ctrl!.setText("")
                    break
                swend
            fi
        wend

    methodend


    rem /**
    rem * Method setEditing:
    rem * invoked from BusinessComponent if a UI component started editing a record in the resultset
    rem * @param BBjNumber isEditing: -1 = i
    rem */
    method public void setEditing(BBjNumber isEditing)

        if isEditing=0 then
            if #EditedRec! <> null() and #getBC().getSelection().size()=1 then
                recno=#getBC().getSelection().getItem(0)
                #getBC().getResultSet().setItem(recno,null())
                #getBC().prepareResultSet(recno,recno)
                #getBC().refresh(0)
            fi

            #this!.displayData()
            #getWnd().focus()

            rem workaround for BUI to drag focus away from input field
            rem https://bugzilla.basis.com/show_bug.cgi?id=25084

            if info(3,6)="5" then
                tmp! = #getWnd().addEditBox(#getWnd().getAvailableControlID(),10,10,10,10,"")
                tmp!.focus()
                tmp!.destroy()
            fi

            #EditedRec! = null()
            #EditedFields! = null()

            if #RestoreControllerFilter! <> null() then
               #getBC().setQueryFilter(#RestoreControllerFilter!)
               #RestoreControllerFilter! = null()
            fi
            #emptyForm()
            #newRecord()
        fi

        rem #enableControls(isEditing,0)

    methodend


    rem /**
    rem * Method restoreEditedField:
    rem * invoked from BusinessComponent, broadcast that the user wants to restore the field currently being edited
    rem */
    method public void restoreEditedField()

        if #Rec! = null() then methodret

        ctrl! = #FormWnd!.getFocusedControl()
        name$ = ctrl!.getName()

        if #getBC().getForeignKeyBC(name$)=null() then
            #displayField(name$)
        else
            #getBC().getForeignKeyBC(name$).refresh(0)
        fi

        rem #EditedFields!.remove(name$)

        #getBC().broadcastEdit(name$, #Rec!.getFieldAsString(name$))

    methodend


    rem /**
    rem * Method newRecord:
    rem * invoked from BusinessComponent, broadcast that the user wants to create a new record
    rem */
    method public void newRecord()

        #FormWnd!.setEnabled(1)
        #emptyForm()
        #EditedFields! = null()
        #EditedRec! = null()
        #IsFormLocked = 0
        #EditedFields! = new java.util.HashMap()

        f! = #getBC().getControllerFilter()
        if f!.size()
            ks! = f!.keySet()
            it! = ks!.iterator()
            while it!.hasNext()
                ctrl_name$=it!.next()
                fixvalues! =f!.get(ctrl_name$)
                if fixvalues! <> null() and fixvalues!.size()=1 then
                    fixvalue$=fixvalues!.getItem(0)
                    ControlMap! = #ControlList!.get(ctrl_name$)
                    ctrl! = ControlMap!.get("ControlInstance")
                    ctrl!.setText(fixvalue$)
                     #EditedFields!.put(ctrl_name$,fixvalue$)
                     print ctrl_name$," ->",fixvalue$,"(fix)"
                fi
            wend
        fi

        f=0
        if #ControlList!.size() then
            ks! = #ControlList!.keySet()
            it! = ks!.iterator()

            minctrl=65000

            while it!.hasNext()
                ctrl_name$=it!.next()
                ControlMap! = #ControlList!.get(ctrl_name$)
                ctrl!       = ControlMap!.get("ControlInstance")

                if #getBC().getPrimaryKeySegments().indexOf(ctrl_name$)>-1 
:                   and ctrl!.getControlType() <> 17 
:                   and #ForeignKeyPickerList!.get(ctrl_name$) = null() then

                    ctrl!.setEnabled(1)
                        if ctrl!.getID() < minctrl then
                            minctrl = ctrl!.getID()
                            fctrl! = ctrl!
                        fi
                else
                    ctrl!.setEnabled(0)
                fi
            wend

            if minctrl<65000 then
                fctrl!.focus()
            fi
        fi

        rem if there's no primary key segment that has been enabled, just enable the entire form and trust in god
        REM TODO maybe put in more logic to determine if only auto increment keys et al are missing 
        if f=0 then
            if #ControlList!.size() then
                ks! = #ControlList!.keySet()
                it! = ks!.iterator()

                while it!.hasNext()
                    ctrl_name$=it!.next()
                    ControlMap! = #ControlList!.get(ctrl_name$)
                    ctrl!       = ControlMap!.get("ControlInstance")
                    ctrl!.setEnabled(1)
                wend
            fi
        fi

        BBjAPI().getSysGui().flushEvents()

    methodend


    rem /**
    rem * Method saveRecord:
    rem * invoked from BusinessComponent, broadcast that the user wants to save the record
    rem * @return BBjNumber: 0 = record saved without errors, 1 = validation errors
    rem */
    method public BBjNumber saveRecord()

        #clearValidationErrorSignage()

        if #EditedFields! <> null() then
            startover:
            ks! = #EditedFields!.keySet()
            it! = ks!.iterator()

            while it!.hasNext()
                ctrl_name$=it!.next()
    
    
                rem take foreign key value from the linked business component
                picker! = #ForeignKeyPickerList!.get(ctrl_name$)
    
                if picker!<> null() then
                    #EditedFields!.put(ctrl_name$,picker!.getSelectedForeignKeyValue())
    
                    continue
                fi

                if #EditedFields!.get(ctrl_name$)=null() then
                    ControlMap! = #ControlList!.get(ctrl_name$)
                    ctrl! = ControlMap!.get("ControlInstance")

                    switch ctrl!.getControlType()
                        case BBjControl.INPUTD_TYPE
                            v = ctrl!.getValue()

                            if #EditedRec! = null() or v<>#EditedRec!.getFieldAsNumber(ctrl_name$) then
                                #EditedFields!.put(ctrl_name$,str(v))
                                validate = #getBC().validateField(ctrl_name$, str(v), #EditedRec!, #EditedFields!)
                            else
                                #EditedFields!.remove(ctrl_name$)
                                exitto startover; rem to avoid concurrent edit exception
                            fi
                        break

                        case BBjControl.CHECKBOX_TYPE
                            v = ctrl!.isSelected()

                            if #EditedRec! = null() or v<>#EditedRec!.getFieldAsNumber(ctrl_name$) then
                                #EditedFields!.put(ctrl_name$,str(v))
                                validate = #getBC().validateField(ctrl_name$, str(v), #EditedRec!, #EditedFields!)
                            else
                                #EditedFields!.remove(ctrl_name$)
                                exitto startover; rem to avoid concurrent edit exception
                            fi
                        break

                        case default
                            default_set2:
                            v$=ctrl!.getText()

                            if #EditedRec!=null() or v$<>cvs(#EditedRec!.getFieldAsString(ctrl_name$),2) then
                                #EditedFields!.put(ctrl_name$,v$)
                                validate = #getBC().validateField(ctrl_name$, v$, #EditedRec!, #EditedFields!)
                            else
                                #EditedFields!.remove(ctrl_name$)
                                exitto startover; rem to avoid concurrent edit exception
                            fi
                        break
                    swend
                fi
            wend
    
            if #EditedFields!.size() then
                #getBC().clearValidationErrors()
                val = #getBC().validateRecord(#getBC().getEditingRecNo(),#EditedFields!)
                val = max(val,#getBC().getFieldValidationErrorLevel())

                if val>0 then
                    #markValidationErrors()

                    if val=ValidationError.ERROR() then
                        a=msgbox(#getBC().getValidationErrorMessage(),16,"validation failed")

                        methodret 1

                        rem aborting save and going back
                    else
                        if val=ValidationError.NOTICE() then
                            icon=64
                        fi

                        if val=ValidationError.WARN() then
                            icon=48
                        fi

                        a=msgbox(#getBC().getValidationErrorMessage(),icon+1,"validation failed")

                        if a=2 then
                            methodret 1
    
                            rem "cancel - abort saving operation
                        fi
                    fi
                fi


                #EditedFields! = cast(java.util.HashMap,#onBeforeSave(#EditedFields!))

REM                 print "RecNo:",#getBC().getEditingRecNo()
REM                 print "Fields:",#EditedFields!

                #getBC().saveRecord(#getBC().getEditingRecNo(),#EditedFields!)
                #getBC().clearValidationErrors()
                #getBC().clearFieldValidationErrors()
                #clearValidationErrorSignage()
            fi
        fi ; rem "if EditedFields <> null()
        
        #EditedFields! = null()
        #EditedRec! = null()

        rem perform onSelectionChange to drive all linked foreign key pickers over the UI
        rem TODO: avoid flickering of the old value in the form

        #this!.getBC().onSelectionChange()
        #this!.displayData()

        rem workaround for BUI to drag focus away from input field
        rem https://bugzilla.basis.com/show_bug.cgi?id=25084

        if info(3,6)="5" then
            tmp! = #getWnd().addEditBox(#getWnd().getAvailableControlID(),10,10,10,10,"")
            tmp!.focus()
            tmp!.destroy()
        fi

        #getWnd().focus()

        #enableControls(0,0)
        BBjAPI().getSysGui().flushEvents()
        #newRecord()

        methodret 0

    methodend


    rem /**
    rem * Method onBeforeSave:
    rem * This method is called from the business component before saving the record
    rem * (needs overriding)
    rem * @return java.util.HashMap: a java.util.HashMap with the edited fields
    rem */
    method protected java.util.HashMap onBeforeSave(java.util.HashMap editedFields!)

        methodret editedFields!

    methodend


    rem /**
    rem * Method clearValidationErrorSignage:
    rem * clear all validation error marks on the form
    rem */
    method private void clearValidationErrorSignage()

        if #WarningIcons!.size() then
            for i=0 to #WarningIcons!.size()-1
                c! = #WarningIcons!.get(i)
                c!.destroy()
            next i

            #WarningIcons!.clear()
        fi

    methodend


    rem /**
    rem * Method markValidationErrors:
    rem * set validation error marks for the controls with validation errors
    rem */
    method private void markValidationErrors()

        declare auto ValidationError v_err!
        declare auto BBjControl ctrl!
        declare auto BBjWindow wnd!
        declare auto BBjToolButton ic!

        #clearValidationErrorSignage()

        v_list!=#getBC().getValidationErrors()

        if v_list!.size() then
            for i=0 to v_list!.size()-1
                v_err!=v_list!.getItem(i)
                f_list! = v_err!.getFieldList()

                if f_list!.size() then
                    for f=0 to f_list!.size()-1
                        f_name$=f_list!.getItem(f)

                        c! = #ControlList!.get(f_name$)

                        ctrl!=c!.get("ControlInstance")

                        wnd! = BBjAPI().getSysGui().getWindow(ctrl!.getContextID())
                        ic! = wnd!.addToolButton(wnd!.getAvailableControlID(),ctrl!.getX()+ctrl!.getWidth(), ctrl!.getY()-4,16,16,"")
                        ic!.setRaisedEdge(0)
                        ic!.setFocusable(0)
                        ic!.setOpaque(0)

                        if v_err!.getLevel() = v_err!.NOTICE() then
                            icon! = BBjAPI().getSysGui().getImageManager().loadImageFromBytes
                        fi

                        if v_err!.getLevel() = v_err!.WARN() then
                            icon! = BBjAPI().getSysGui().getImageManager().loadImageFromBytes($89504E470D0A1A0A0000000D49484452000000100000001008060000001FF3FF61000002524944415478DAB5926F48536118C51F188544D08AB25199061298E9A2200A0291CCB24030D40872146139CA5552391A597D72A8F73AB52D32E775830C8CCA046350D64C0CFFA10C6FDA1C33D3894EDC660D579BAED3DD822812B3A0033F789F0FE79C878797E87F4AAB5DB7F2AE7AF5AA7F32D7B292248E8974D58660D726FD95B9E166FC728E8972D8078DB00F1AC031EB1DA16D961CC095C52A3B5EAA3035FC10135603BACC2AD4B11B8A9664AE61E3D7704C9CCB3B63C73BF371816C04837ED431D15EAE2446F2E7762681E969D3607AA4112A650E0A2E64C2C157C1D2A1114262758B9A8DA5895B3846EA0FF867D1FF2A1D6969696178F37E04E77CC22DE2E66BD86DB18BB427DEB774EAE1196F81EBFD216464A423F5400A26F883E04D720CF61951CB6C7FBCB0B944BCE3495D32F0F5336CED29087833912B3B8C3D9B56806F2298D4842FDE29343F90415F26DDF75B407531B5F4779FC7CC643D9C0312F89C7B7149B611A78F46C3C94B30DAB90CB6D757313264126E216DFBC5AC2BA2234D06B1B07A05BAEB23E0B646E2D3480C66DDC784D6B39873EF867F7A17EC6609E6035EBC6854C0C04A33BE7F9A2C12690BA9EFED9B1C8CF62A6035113E0E6F856F5C8A4AE6040A0B92C3EFD9B104382D627CE8D2C039D61ADAC2D6D09025A2CA7C3AD95CBD195E8711CF8B23C03F22589F89C2E4E5A6225F9EFA631E784A68AFDE8990DA4CA7848346C9A93C8F7A865A2FC363E3E019E6F0B382C16098853439C6E29E9A1CA4CC267DF91942983C82464EA83827A020545E245415106E5F21689502D708BAEB843B37046E114A95D4FB0D123F95B46841BEF10000000049454E44AE426082$)
                        fi

                        if v_err!.getLevel() = v_err!.ERROR() then
                            icon! = BBjAPI().getSysGui().getImageManager().loadImageFromBytes($89504E470D0A1A0A0000000D49484452000000100000001008060000001FF3FF61000002524944415478DA75935D489A6114C7BDE872DEB4E8D3C80B239036E80324A2A0A8208218ECCA2B0982D2F44AD07B711BDEB8722186287ABB60B1B58CAC315738C5E6FCBA1ADB606BA8EDB511B2816E5EFC77CE6B91963DF0E3BCCF39FFF37FCEFB2591D42CAFD7AB74BBDD028106E43D1E4F9FE4B6E572B9941B1B1B423A9D46A552B941329904D5F3AC6BD8EC743AF38944025F8F8E703039890F131388131C79FF291402D7595767B2BABADAE77038F2C7C7C762736C7A1AE77373F83B3F8F7F0447DE739EEBAC23BD40544DEC767B3E1C0EE3F3E121C274DACF9919FC9E9DC59F1A78CF79AEB32E128980FABE8B06369B0D8542015B2323382141616A0A670DE03CD7B7C6C6502E97C17DA281C562412E974360701027E3E3F8D1806FA3A3F8A25289F59D8101F0B25AAD5583959515F02D385B5AF05EA140A4B7578CEF7A7AF0B6BB1B7B6D6D08B6B7E3A0B353BC7E2A95229BCDC268345E1944A351389A9BB1C7A28E0E04291EC86478430621B9BC0E676B2B04418056ABAD1AF0452C16C3636A7AD9D5853D6A0ADEC22BAA3F218362B1586790F5F97CD85C5FC7333AF50519ED90B096D704E71D345D6C7B1BA9540A3A9DEE5434D0EBF5F7C844609380D78B35126E127C1AC3533DA7FD1A4DF07177576C369BCD0583C170F5312D2D2D2997979705BFDF8F001959E9243B8D6AA787C6F1114D96DADF179B4D265381F5373E67B55A7D7F7171F1947E18643219944A25F17D5F128FC7F9C99FB1AED1BF7487900F0D0D3DD06834BF161616701DCA9F0F0F0F3F641D21BD6ED044DC25648482E8270609D545ECBFC8CB2E744D978DFF01179CEE65B0A7865F0000000049454E44AE426082$)
                        fi

                        ic!.setImage(icon!)
                        ic!.setToolTipText(v_err!.getMessage())
                        #WarningIcons!.addItem(ic!)
                    next f
                fi
            next i
        fi

    methodend


    rem /**
    rem * Method onPartialUpdate:
    rem * invoked from Business Component, broadcasting the change of a record
    rem * @param BBjNumber recno: the record number within the resultset that has been updated
    rem * @param BBjNumber isLocked: 1=record was locked, 0=record was unlocked
    rem */
    method public void onSoftlockStatusChange(BBjNumber recno, BBjNumber isLocked)

        if #getBC().getSelection().size()=1 then
            if recno=#getBC().getSelection().getItem(0) then
                locked = #getBC().isLocked(recno)
                #FormWnd!.setEnabled(!locked)

                if locked=0 then
                    #displayData()
                fi
            fi
        fi

    methodend


    rem /**
    rem * Method onBroadcastEdit:
    rem * called by BC to notify the UI about an ongoing edit from a different side
    rem * @param BBjNumber recNo: the record number that was edited
    rem * @param BBjString fieldName$: the field name that just was edited
    rem * @param BBjSting newContent$: the new Contents of the field
    rem */
    method public void onBroadcastEdit(BBjNumber recNo, BBjString fieldName$, BBjString newContent$)

        if #EditedRec! = null() AND #getBC().getSelection().size()=1 then
            if recno=#getBC().getSelection().getItem(0) then
                ControlMap! = #ControlList!.get(fieldName$)

                if ControlMap! <> null() then
                    ctrl! = ControlMap!.get("ControlInstance")
                    ctrl!.setText(newContent$)
                fi
            fi
        fi

    methodend


    method public void onTbDatePick(BBjToolButtonPushEvent ev!)

        c$=ev!.getControl().getName()

        if pos(".pick"=c$) then
            wnd! = BBjAPI().getSysGui().getWindow(ev!.getControl().getContextID())
            ctrl! = wnd!.getControl(c$(1,pos(".pick"=c$)-1),err=*next)
            if ctrl!<>null() then
                ctrl!.calendar(err=*next)
            fi
        fi

    methodend


    rem /**
    rem * Method searchRecord:
    rem * search and select a record if it is existing. Condition: the primary key controls are filled in.
    rem */
    method public void searchRecord()

        pk! = #getBC().getPrimaryKeySegments()
        if pk!.size() = 0 then
            methodret
        fi

        n$ = BBjAPI().getLastEvent().getControl().getName()
        if !pk!.contains(n$) then
            methodret
        fi


        filter! = new java.util.HashMap()

        for i=0 to pk!.size()-1
            ctrl_name$=pk!.getItem(i)
            ControlMap! = #ControlList!.get(ctrl_name$)
            if ControlMap! <> null() then
                ctrl! = ControlMap!.get("ControlInstance")
                c$=ctrl!.getText()
                if c$>"" then
                    v!=new BBjVector()
                    filter!.put(ctrl_name$,v!)
                    v!.addItem(c$)
                fi
            fi
        next i

        if #getBC().checkRecordExists(filter!) then
            rem record exists - pull it up instead and edit it

            #getBC().setEditedRecord(-1)

            if #getBC().getQueryFilter() <> null() then
                #RestoreControllerFilter! = cast(java.util.HashMap, #getBC().getQueryFilter().clone())
            else
                #RestoreControllerFilter! = new java.util.HashMap()
            fi

            #getBC().setQueryFilter(filter!)
            #getBC().prepareResultSet(0,0)
            v1! = new BBjVector()
            v1!.add(0)
            #getBC().setSelection(v1!)
            #getBC().setEditedRecord(0) 
            #EditedRec! = cast(DataRow,#Rec!.clone())
            #EditedFields! = new java.util.HashMap()
            #setEditing(1)
        else
            #getBC().setEditedRecord(-2)
        fi

        #enableControls(1,1)

    methodend


    rem /**
    rem * Method enableControls:
    rem * make all controls editable or not editable. If fSetFocus=1, set the focus of the first control on the form that is not part of the primary key.
    rem */
    method private void enableControls(BBjNumber fEditing, BBjNumber fSetFocus)

        min_pkfield     = 65000
        min_datafield   = 65000

        if #ControlList!.size() then
            ks! = #ControlList!.keySet()
            it! = ks!.iterator()

            while it!.hasNext()
                ctrl_name$=it!.next()
                ControlMap! = #ControlList!.get(ctrl_name$)
                if ControlMap! <> null() then
                    ctrl!       = ControlMap!.get("ControlInstance")

                    ctrl!.setEditable(!#ReadOnly,err=*next)

                    if #getBC().getPrimaryKeySegments().indexOf(ctrl_name$)>-1 then
                        ctrl!.setEnabled(!fEditing)
                        min_pkfield = min(min_pkfield, ctrl!.getID())
                    else
                        ctrl!.setEnabled(fEditing)
                        min_datafield = min(min_datafield, ctrl!.getID())
                    fi
                fi
            wend
        fi

        if fEditing AND fSetFocus then
            #FormWnd!.getControl(min_datafield).focus()
        fi

    methodend

classend
